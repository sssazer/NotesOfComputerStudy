模块导入的方法：
1、import 模块
2、from 模块 import 子模块或模块中某个函数名
3、from 模块 import 函数 as rename   # 重命名导入的模块，原函数名无法使用
4、from module import *  # 导入一个模块下所有的方法 不推荐使用

在导入一个模块时（不是调用）就会执行模块中的所有代码

sys.path：列表形式储存python解释器在哪些路径中寻找要导入的包，跨路径导包可以直接往里添加目标路径
__file__:当前python文件的绝对路径

第三方包下载地址：pypi.org  国内镜像网站：http://pypi.doubanio.com/simple/ 可以直接在pycharm中替换安装源
	             或  pip install 包名 -i http://pypi.doubanio.com/simple/ --trusted-host pypi.douban.com

只要在目录下添加一个 __init__.py 文件，这个目录就变为了一个包。当导入包的时候，init文件就会被执行

datetime模块：
datetime.datetime.now()  打印当前时间
时间对象 + datetime.timedelta(hour=5)  # 时间运算
d.replace(year=100,month=5)

random模块：
random.randrange(1,100，2)  # 返回1~100之间的随机偶数，不包括100，参数只能是整数
random.randint(1,100)  # 返回1~100之间的随机整数，包括100，不能加步长
random.random()  # 返回一个[0,1)随机浮点数
random.choice(list)  # 从一个给定的数据集合中选择一项
random.sample(list,k)  # 从一个给定的数据集合中选择k项，返回列表
random.shuffle(list)  # 将集合中的数据随机排序，直接改变原集合

openpyxl模块：

操作excel的文件  import openpyxl
wb = openpyxl.Workbook()  # 创建一个excel对象
wb2 = openpyxl.load_workbook("name.xlsx")  # 打开已有的excel文件
wb.save("name.xlsx")  # 将excel文件保存在指定位置
wb.sheetnames/wb.get_sheet_names()  # 获取当前文件中的所有sheet名字，返回一个列表

sheet=wb.get_sheet_by_name("Sheet1")  # 获取指定的表，会有警告
sheet[sheetname]  # 获取指定的表
sheet = wb.active  # 获取当前活跃的sheet对象，要通过sheet对象操作excel文件
sheet.title = ""  # 给当前表起名
增：
sheet["B9"] = xxx  # 向指定的位置写入数据
sheet.append([1,2,3])  # 添加多项数据，从最后一行有数据的位置的下一行开始最左端开始
查：
sheet["B9"]  # 返回一个cell对象
sheet["B1:B5"]  # 每一行的所有cell对象组成一个元组
sheet["B9"].value  # 获取指定位置的数据
改：
sheet["A1"] = num
删：
wb.remove(sheet)
del wb[sheet]


遍历sheet：
1、for row in sheet:  # 遍历表中所有数据
         for cell in row:
             print(cell.value)

2、for row in sheet.iter_rows(min_row= ,max_row=, min_col=,max_col=):
          for cell in row:		#遍历表中指定区域数据
	print(cell.value)

3、for col in sheet.columns:  # 按列循环
           for cell in col:

4、for col in sheet.iter_cols():      # 和2一样 
          for cell in col:	

变换样式：from openpyxl.styles import Font,colors,Alignment
font1 = Font(name=,size=,italic(斜体)=True,color=colors.RED,bold(粗体)=True)  # 创建一个样式对象
sheet["A1"].font = font1

sheet["B1"].alignment = Alignment(horizontal='center',vertical='center')  # 设置对齐方式

sheet.row_dimensions[2].height = 40  # 设置第二行行高
sheet.column_dimensions['C'].width = 30  # 设置C列列宽


xlrd模块：读取excel
xlsx = xlrd.open_workbook('文件路径')
sheet = xlsx.sheet_by_index(0)  # 取到第一个表
# 取到第一个单元格中的数据（从0开始数）
sheet.cell_value(0,0)
sheet.cell(0,0).value
sheet.row(0)[0].value
# 获取表名： 
sheet.name
xlsx.sheet _names()
sheet.nrows  # 取到行数

xlwt模块：写入excel，不能超过256列
new_work_book = xlwt.Workbook()
worksheet = new_workbook.add_sheet('sheet_name')
worksheet.write(0,0,'content')
new_workbook.save('test.xls')

xlsxwriter模块：写入excel,不带格式
workbook = xlsxwriter.Workbook('test.xlsx')
sheet = workbook.add_worksheet('sheet1')
workbook.close()


xlutils模块(依赖于xlrd和xlwt模块):设置单元格格式
old_excel = xlrd.open_workbook('test.xls',formatting_info=True)
new_excel = copy(old_excel)
new_sheet = new_excel.get_sheet(0)
# 创建格式对象
style = xlwt.XFStyle()
# 创建字体对象并添加至格式中
font = xlwt.Font()
font.name = '微软雅黑'
font.bold/underline/italic = True   # 加粗/下划线/斜体
font.height = 360 # excel字号*20
style.font = font
# 创建边框对象
borders = xlwt.Borders()
borders.top/bottom/left/right = xlwt.Borders.THIN
style.borders = borders
# 对齐
alignment = xlwt.Alignment()
alignment.horz = xlwt.Alignment.HORZ_CENTER
alignment.vert = xlwt.Alignment.VERT_CENTER
style.alignment = alignment

new_sheet.write(0,0,'',style)

发送邮件：邮件遵循SMTP(Simple Mail Transfer Protocol)协议，即简单邮件传输协议。
                两个模块：smtplib：简单封装了smtp协议，负责登录邮件服务器和发送邮件   email：负责构造邮件
发送纯文本邮件：
import smtplib
from email.mime.text import MIMEText
from email.header import Header
# 创建邮件对象
Email = smtplib.SMTP_SSL("smtp.163.com",465)  # 所用邮箱的SMTP服务器地址和SSL端口号
Email.login('wangyizesazer@163.com','ZNRRUURIUPHYZZUP')  # 登录邮箱，所用密码为邮箱授权密码

msg = MIMEText("This is an email for testing,don't mind plz",'plain','utf-8')  # 创建消息对象和主要内容，plain表示纯文本形式
msg["From"] = Header("a Python",'utf-8')  # 宣称的发件人（与发件邮箱不同）
msg["To"] = Header("a special you你",'utf-8')  # 对收件人的称呼
msg["Subject"] = Header("Python发送邮件","utf-8")  # 邮件主题
# 发送邮件，第一个参数为发件地址，第二个列表为收件地址，可以同时发送多个，第三个参数为发送的信息
Email.sendmail("wangyizesazer@163.com",["1410705959@qq.com","1154394891@qq.com"],msg.as_string())

发送Html形式的邮件：
mail_body = '''
Html语句
'''
msg = MIMEText(mail_body,"html","utf-8")


docx模块：处理word文档     中文前要加u告诉python后面的是unicode编码
# from docx import Document
document = Document('路径')  # 括号里是路径的话是打开，不写是新建
document.styles['Normal'].font.name = u'宋体'  # 设置文档的基础字体
# 建立一个自然段 
p1 = document.add_paragraph()
# from docx.enum.text import WD_ALIGN_PARAGRAPH
p1.(paragraph_format).alignment = WD_ALIGN_PARAGRAPH.CENTER  # 设置对齐方式，默认是左对齐
last_paragraph = document.paragraphs[-1]  # 获取指定自然段
# 添加文字
run = p1.add_run(u'我添加的文字')
# 设置颜色  from docx.shared import RGBColor
run.font.color.rgb = RGBColor(54,95,145) 
# 设置字号 from docx.shared import Pt
run.font.size = Pt(36)  # 字体大小就是word中的字号，默认11
# 添加图片  from docx.shared import Inches
pic = document.add_picture('pic.png',width = Inches(1.5))
# 可以将图片居中
last_paragraph = document.paragraphs[-1]
last_paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
# 创建表格
table = document.add_table(rows=2,cols=3,style='Table Grid')  # Table Grid格式是普通黑色边框表格
#  自定义表格宽、高
table.autofit = False
col = table.columns[1]  # 从一开始
col.width = Inches(5)
# 对表格赋值
table.cell(i,j).text = u'表格文字'
# 添加表格行
row = table.add_row()

#保存文档
document.save('test.docx')







