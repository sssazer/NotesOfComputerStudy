协程不是计算机提供的，而是人为创造的，也被称作微线程，是一种用户态内的上下文切换技术，其实就是通过一个线程实现代码块相互切换执行

实现协程的方式：
	1、greenlet，早期模块。
	2、yield关键字
	3、asyncio模块的装饰器（py3.4）
	4、async、await关键字（py3.5）【推荐】

greenlet：
	from greenlet import greenlet
	gr1=greenlet(函数名)
	gr1.switch

异步编程：

事件循环：理解为一个死循环，去检测并执行某些代码

	任务列表=[任务1、任务2、任务3……]
	while True：
		可执行的任务列表、已完成的任务列表=去任务列表中检查所有的任务，将‘可执行’和‘已完成’的任务返回至列表中
		for 就绪任务 in 可执行的任务列表：
			执行已就绪的任务
		for 已完成的任务 in 已完成的任务列表：
			在整个任务列表中移除已完成的任务
		if 任务列表中的所有任务都已完成
			终止循环
	基本语法：
	import asyncio
	# 生成或获取一个事件循环
	loop=asyncio.get_event_loop()
	# 将任务放在任务列表中
	loop.run_until_complete(要放入的任务)


协程函数：async def 函数名（）：   async def func():
协程对象：执行协程函数（）得到的对象   函数名加()本身就是协程对象  result=func()  result即为协程对象，此时协程函数并不会被执行，只是得到了一个协程对象
	如果想要运行协程函数内部代码，必须要将协程对象交给事件循环来处理
基本操作：import asyncio
	async def func():
	     代码块
	     pass
	result = func
	# 旧写法：
	loop=asyncio.get_event_loop()
	loop.run_until_complete(result)/loop.run_until_complete(func())
	# python3.7之后
	asyncio.run(result)  # 参数只能是事件对象

await关键字：
	await + 可等待的对象（协程对象、Future、Task对象）  挂起当前协程，await后跟的是当前协程要执行的IO等待操作，告诉程序这里需要等待，可以先去执行别的协程了
	await就是等await后面的对象执行完了才会继续执行当前协程，等待的期间会执行其他协程，但一定不会执行当前协程的后面。当下一步依赖于上一步的结果时可以用await

Task对象：在事件循环中添加多个任务，通过asyncio.create_task(协程对象)（python3.7之后）的方式创建Task对象，并让协程加入事件循环中等待被调度执行。还可以使用低层次的loop.create_task()或ensure_future()函数
	Task基本操作：
	task=asyncio.create_task(func(),name='给这个task对象起的名字')
	await task1
	或	
	task_list={
		asyncio.create_task(func(),name=''),
		asyncio.create_task(func(),name='')
	}
	done,pending=await asyncio.wait(task_list)  # done是返回值，pending是错误信息，一般没什么用
asyncio.Future对象：Task继承Future，Task对象内部await结果的处理基于Future对象。
concurrent.futures.Future:使用线程池或进程池实现异步操作时用到的对象